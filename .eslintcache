[{"/Users/tachyon/Documents/develop/js/chapp-front/src/index.js":"1","/Users/tachyon/Documents/develop/js/chapp-front/src/App.js":"2","/Users/tachyon/Documents/develop/js/chapp-front/src/host.js":"3","/Users/tachyon/Documents/develop/js/chapp-front/src/utils/AuthRoute.js":"4","/Users/tachyon/Documents/develop/js/chapp-front/src/pages/Main/Main.jsx":"5","/Users/tachyon/Documents/develop/js/chapp-front/src/pages/Lobby/Lobby.jsx":"6","/Users/tachyon/Documents/develop/js/chapp-front/src/pages/Signup/Signup.jsx":"7","/Users/tachyon/Documents/develop/js/chapp-front/src/pages/Signin/Signin.jsx":"8","/Users/tachyon/Documents/develop/js/chapp-front/src/recoil/atoms.js":"9","/Users/tachyon/Documents/develop/js/chapp-front/src/utils/util.js":"10","/Users/tachyon/Documents/develop/js/chapp-front/src/components/RoomList/RoomList.jsx":"11","/Users/tachyon/Documents/develop/js/chapp-front/src/components/Chatting/Chatting.jsx":"12","/Users/tachyon/Documents/develop/js/chapp-front/src/components/Container/Container.jsx":"13","/Users/tachyon/Documents/develop/js/chapp-front/src/components/Chat/Chat.jsx":"14","/Users/tachyon/Documents/develop/js/chapp-front/src/components/Room/Room.jsx":"15"},{"size":219,"mtime":1628229984173,"results":"16","hashOfConfig":"17"},{"size":1147,"mtime":1628229983697,"results":"18","hashOfConfig":"17"},{"size":57,"mtime":1628229984155,"results":"19","hashOfConfig":"17"},{"size":804,"mtime":1628229984622,"results":"20","hashOfConfig":"17"},{"size":871,"mtime":1628229984320,"results":"21","hashOfConfig":"17"},{"size":6875,"mtime":1628229984176,"results":"22","hashOfConfig":"17"},{"size":2424,"mtime":1628229984571,"results":"23","hashOfConfig":"17"},{"size":2588,"mtime":1628229984453,"results":"24","hashOfConfig":"17"},{"size":483,"mtime":1628229984607,"results":"25","hashOfConfig":"17"},{"size":606,"mtime":1628229984641,"results":"26","hashOfConfig":"17"},{"size":5584,"mtime":1628229984146,"results":"27","hashOfConfig":"17"},{"size":10998,"mtime":1628229984048,"results":"28","hashOfConfig":"17"},{"size":1908,"mtime":1628229984062,"results":"29","hashOfConfig":"17"},{"size":3033,"mtime":1628229983987,"results":"30","hashOfConfig":"17"},{"size":2767,"mtime":1628229984097,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"epo3s6",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/tachyon/Documents/develop/js/chapp-front/src/index.js",["67"],"/Users/tachyon/Documents/develop/js/chapp-front/src/App.js",[],["68","69"],"/Users/tachyon/Documents/develop/js/chapp-front/src/host.js",[],"/Users/tachyon/Documents/develop/js/chapp-front/src/utils/AuthRoute.js",[],"/Users/tachyon/Documents/develop/js/chapp-front/src/pages/Main/Main.jsx",["70","71","72"],"import React, { useEffect, useState } from 'react';\nimport Container from '../../components/Container/Container';\nimport socketIo from '../../utils/util';\nimport { useRecoilValue } from 'recoil';\nimport { UsernameState } from '../../recoil/atoms';\nimport { withRouter } from 'react-router';\nimport ChattingImage from '../../assets/room-wrap-bg.png';\nimport styles from './main.module.scss';\n\nfunction Main() {\n  const username = useRecoilValue(UsernameState);\n\n  return (\n    <Container>\n      <div className={styles.mainDiv}>\n        <img src={ChattingImage} alt=\"chatting\" className={styles.image} />\n        <div className={styles.textContainer}>\n          <p className={styles.text}>\n            Welcome,\n            <span className={styles.name}>{username}</span>!\n          </p>\n        </div>\n      </div>\n    </Container>\n  );\n}\n\nexport default withRouter(Main);\n","/Users/tachyon/Documents/develop/js/chapp-front/src/pages/Lobby/Lobby.jsx",[],"/Users/tachyon/Documents/develop/js/chapp-front/src/pages/Signup/Signup.jsx",[],"/Users/tachyon/Documents/develop/js/chapp-front/src/pages/Signin/Signin.jsx",[],"/Users/tachyon/Documents/develop/js/chapp-front/src/recoil/atoms.js",[],"/Users/tachyon/Documents/develop/js/chapp-front/src/utils/util.js",[],"/Users/tachyon/Documents/develop/js/chapp-front/src/components/RoomList/RoomList.jsx",["73"],"import React, { useState, useEffect } from 'react';\nimport socketIo from '../../utils/util';\nimport Room from '../../components/Room/Room';\nimport Rodal from 'rodal';\nimport 'rodal/lib/rodal.css';\nimport styles from './roomlist.module.scss';\nimport { useRecoilValue } from 'recoil';\nimport { UsernameState } from '../../recoil/atoms';\n\nfunction RoomList({\n  roomFoldId,\n  setRoomFoldId,\n  setRoomId,\n  setUserList,\n  setGroupList,\n}) {\n  const username = useRecoilValue(UsernameState);\n  const [roomList, setRoomList] = useState([]);\n  const [showNewRoomModal, setShowNewRoomModal] = useState(false);\n  const [newRoomData, setNewRoomData] = useState({\n    roomTitle: '',\n    roomPw: '',\n    roomCapacity: 5,\n  });\n\n  const fetchRoomList = () => {\n    socketIo.getSocket().then((socket) => {\n      socket.emit('room.list', (res) => {\n        if (res.result) {\n          setRoomList(res.packet);\n        } else {\n          alert('Could not get room list');\n        }\n      });\n    });\n  };\n\n  const refreshRoomList = () => {\n    socketIo.getSocket().then((socket) => {\n      socket.on('room.list.refresh', (res) => {\n        fetchRoomList();\n      });\n    });\n  };\n\n  const fetchUserList = () => {\n    socketIo.getSocket().then((socket) => {\n      socket.emit('user.listInLobby', (res) => {\n        if (res.result) {\n          setUserList(res.packet);\n        }\n      });\n    });\n  };\n\n  const refreshUserList = () => {\n    socketIo.getSocket().then((socket) => {\n      socket.on('user.listInLobby.refresh', (res) => {\n        if (res.result) {\n          const { userId, isOnline } = res.packet;\n          if (isOnline) {\n            setUserList((prevState) => [userId, ...prevState]);\n          } else {\n            setUserList((prevState) =>\n              prevState.filter((name) => name !== userId)\n            );\n          }\n        }\n      });\n    });\n  };\n\n  const fetchGroupList = () => {\n    socketIo.getSocket().then((socket) => {\n      socket.emit('group.list', (res) => {\n        if (res.result) {\n          setGroupList(res.packet);\n        }\n      });\n    });\n  };\n\n  const refreshGroupList = () => {\n    socketIo.getSocket().then((socket) => {\n      socket.on('group.list.refresh', (res) => {\n        if (res.result) {\n          const { groupId, isOnline } = res.packet;\n          if (isOnline) {\n            setGroupList((prevState) => [groupId, ...prevState]);\n          } else {\n            setGroupList((prevState) =>\n              prevState.filter((group) => group !== groupId)\n            );\n          }\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetchRoomList();\n    refreshRoomList();\n    fetchUserList();\n    refreshUserList();\n    fetchGroupList();\n    refreshGroupList();\n\n    return () => {\n      // socketIo.getSocket().then((socket) => {\n      //   socket.off('room.list.refresh');\n      //   socket.off('user.listInLobby.refresh');\n      //   socket.off('group.list.refresh');\n      // });\n    };\n  }, []);\n\n  const handleNewRoomClick = () => {\n    setShowNewRoomModal(true);\n  };\n\n  const closeNewRoomModal = () => {\n    setShowNewRoomModal(false);\n    setNewRoomData({\n      roomTitle: '',\n      roomPw: '',\n      roomCapacity: 5,\n    });\n  };\n\n  const handleNewRoomInputChange = (e) => {\n    const { name, value } = e.target;\n    setNewRoomData({ ...newRoomData, [name]: value });\n  };\n\n  const handleAddNewRoom = (e) => {\n    e.preventDefault();\n    const { roomTitle, roomPw, roomCapacity } = newRoomData;\n    if (!roomTitle || !roomCapacity) {\n      alert('Fill in the blanks');\n      return;\n    }\n    const roomData = {\n      roomId: null,\n      roomPw: roomPw === '' ? null : roomPw,\n      roomTitle,\n      roomCnt: null,\n      roomCapacity,\n      roomOwner: username,\n    };\n    socketIo.getSocket().then((socket) => {\n      socket.emit('room.create', roomData, (res) => {\n        if (res.result) {\n          closeNewRoomModal();\n          setRoomId(parseInt(res.packet));\n        }\n      });\n    });\n  };\n\n  return (\n    <div>\n      <button className={styles.newRoomButton} onClick={handleNewRoomClick}>\n        New Room +\n      </button>\n      {roomList.map((room, i) => (\n        <Room\n          key={i}\n          room={room}\n          num={i}\n          setRoomId={setRoomId}\n          roomFoldId={roomFoldId}\n          setRoomFoldId={setRoomFoldId}\n        />\n      ))}\n\n      <Rodal visible={showNewRoomModal} onClose={closeNewRoomModal}>\n        <form onSubmit={handleAddNewRoom} className={styles.newRoomModalForm}>\n          <div className={styles.row}>\n            <label>Name:</label>\n            <input\n              type=\"text\"\n              name=\"roomTitle\"\n              value={newRoomData.roomTitle}\n              onChange={handleNewRoomInputChange}\n              placeholder={'Enter room name'}\n            />\n          </div>\n          <div className={styles.row}>\n            <label>Password:</label>\n            <input\n              type=\"password\"\n              name=\"roomPw\"\n              value={newRoomData.roomPw}\n              onChange={handleNewRoomInputChange}\n              placeholder={'Enter room password'}\n            />\n          </div>\n          <div className={styles.row}>\n            <label>Capacity:</label>\n            <input\n              type=\"text\"\n              name=\"roomCapacity\"\n              value={newRoomData.roomCapacity}\n              onChange={handleNewRoomInputChange}\n              placeholder={'Enter room capacity'}\n            />\n          </div>\n          <button type=\"submit\">Add New Room</button>\n        </form>\n      </Rodal>\n    </div>\n  );\n}\n\nexport default RoomList;\n","/Users/tachyon/Documents/develop/js/chapp-front/src/components/Chatting/Chatting.jsx",["74","75"],"import React, { useEffect, useState } from 'react';\nimport socketIo from '../../utils/util';\nimport { useRecoilValue } from 'recoil';\nimport { UsernameState } from '../../recoil/atoms';\nimport styles from './chatting.module.scss';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport Rodal from 'rodal';\nimport 'rodal/lib/rodal.css';\nimport Chat from '../Chat/Chat';\n\nfunction Chatting({\n  roomId,\n  setRoomId,\n  userList,\n  setUserList,\n  setGroupList,\n  setRoomFoldId,\n  setCurrentGroup,\n}) {\n  const username = useRecoilValue(UsernameState);\n  const [roomName, setRoomName] = useState('');\n  const [roomInfo, setRoomInfo] = useState({});\n  const [userEditInput, setUserEditInput] = useState({\n    roomTitle: '',\n    roomPw: '',\n    roomCapacity: 0,\n  });\n  const [userUpdate, setUserUpdate] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [sendTo, setSendTo] = useState('all');\n  const [whisperTarget, setWhisperTarget] = useState('');\n  const [chatInput, setChatInput] = useState('');\n  const [chatData, setChatData] = useState([]);\n\n  const chatType = [\n    { id: 'all', name: 'All' },\n    { id: 'group', name: 'Group' },\n    { id: 'whisper', name: 'Whisper' },\n  ];\n\n  const handleEditInputChange = (e) => {\n    const { name, value } = e.target;\n    setUserEditInput({ ...userEditInput, [name]: value });\n  };\n\n  const handleEditButton = () => {\n    socketIo.getSocket().then((socket) => {\n      socket.emit('room.info', (res) => {\n        setRoomInfo(res.packet);\n        const { roomTitle, roomCapacity } = res.packet;\n        setUserEditInput({ ...userEditInput, roomTitle, roomCapacity });\n        if (res.packet.roomOwner !== username) {\n          alert(\"You don't have access.\");\n          return;\n        } else {\n          setShowEditModal(true);\n        }\n      });\n    });\n  };\n\n  const handleEditSubmit = (e) => {\n    e.preventDefault();\n    const { roomTitle, roomPw, roomCapacity } = userEditInput;\n    if (roomTitle === '') {\n      alert('Enter a valid name');\n      return;\n    } else if (!roomCapacity) {\n      alert('Enter valid room capacity');\n      return;\n    }\n    const roomDto = {\n      ...roomInfo,\n      roomTitle,\n      roomPw: roomPw || null,\n      roomCapacity: parseInt(roomCapacity),\n    };\n    socketIo.getSocket().then((socket) => {\n      socket.emit('room.update', roomDto, (res) => {\n        if (res.result) {\n          closeEditModal();\n          setUserUpdate(true);\n        } else {\n          alert('Failed to leave room');\n        }\n      });\n    });\n  };\n\n  const closeEditModal = () => {\n    setShowEditModal(false);\n    setUserEditInput({\n      roomTitle: roomInfo.roomTitle,\n      roomPw: '',\n      roomCapacity: roomInfo.roomCapacity,\n    });\n  };\n\n  const handleLeave = () => {\n    socketIo.getSocket().then((socket) => {\n      socket.emit('room.leave', (res) => {\n        if (res.result) {\n          setRoomId(null);\n          socket.off();\n        } else {\n          alert('Failed to leave room');\n        }\n      });\n    });\n  };\n\n  const handleFoldButton = () => {\n    setRoomId(null);\n    setRoomFoldId(roomId);\n    socketIo.getSocket().then((socket) => {\n      socket.off();\n    });\n  };\n\n  const getRoomInfo = () => {\n    socketIo.getSocket().then((socket) => {\n      console.log('abc?', socket.abc)\n      console.log('hasListeners', socket.hasListeners('chat.in'))\n      console.log('when getting roomInfo', socket.listeners('chat.in'))\n      socket.emit('room.info', (res) => {\n        setRoomInfo(res.packet);\n        const { roomTitle, roomCapacity } = res.packet;\n        setRoomName(roomTitle);\n        setUserEditInput({ ...userEditInput, roomTitle, roomCapacity });\n      });\n    });\n  };\n\n  const refreshRoomInfo = () => {\n    socketIo.getSocket().then((socket) => {\n      socket.on('room.info.refresh', (res) => {\n        console.log('when refreshing roomInfo', socket.listeners('chat.in'))\n        console.log(res);\n      });\n    });\n  };\n\n  const handleChatInputChange = (e) => {\n    setChatInput(e.target.value);\n  };\n\n  const setSendSelect = (e) => {\n    setSendTo(e.target.value);\n  };\n\n  const onWhisperTargetSelect = (e) => {\n    setWhisperTarget(e.target.value);\n  };\n\n  const handleSendChat = (e) => {\n    e.preventDefault();\n\n    // let escapeSend = false;\n\n    // console.log(sendTo)\n\n    const userListWithoutSelf = userList.filter((user) => user !== username);\n\n    const chatDto = {\n      from: username,\n      to:\n        sendTo === 'whisper'\n          ? whisperTarget === ''\n            ? userListWithoutSelf[0]\n            : whisperTarget\n          : null,\n      text: chatInput,\n      type: sendTo,\n    };\n\n    socketIo.getSocket().then(socket => {\n      console.log('right after pressing handleSendChat', socket.listeners('chat.in'))\n      if (sendTo === 'group') {\n        socket.emit('user.read', (res) => {\n          if (!res.packet.groupId) {\n            alert('You are not in a group');\n            // escapeSend = true;\n          } else socket.emit('chat.out', chatDto)\n        });\n      } else {\n        console.log('alright not group chat')\n        console.log(socket.listeners('chat.in'))\n        socket.emit('chat.out', chatDto)\n        setChatInput('');\n      }\n\n      setChatInput('');\n      // if (escapeSend) return\n    })\n\n    // socketIo.getSocket().then((socket) => {\n    //   // console.log('event names', socket.eventNames())\n    //   console.log('sending out outer')\n    //   console.log(socket.listeners())\n    //   console.log(socket.listeners('chat.in'))\n    //   socket.emit('chat.out', chatDto)\n    //   // socket.emit('chat.out', chatDto, (res) => {\n    //   //   console.log('sending out')\n    //   //   // console.log('event names', socket.eventNames())\n    //   //   if (!res.result) {\n    //   //     console.log(res);\n    //   //   }\n    //   // });\n    // });\n    // setChatInput('');\n  };\n\n  const fetchUserList = () => {\n    socketIo.getSocket().then((socket) => {\n      console.log('when fetchingUserList', socket.listeners('chat.in'))\n      socket.emit('user.listInRoom', (res) => {\n        if (res.result) {\n          setUserList(res.packet);\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    // getRoomInfo();\n    // refreshRoomInfo();\n    // fetchUserList();\n    setGroupList([]);\n\n    socketIo.getSocket().then((socket) => {\n      console.log('chat.in event reg?')\n      socket.abc = 123\n      socket.on('chat.in', (res) => {\n        console.log('res', res)\n        console.log(res.packet);\n        console.log('hasListeners when first registering chat.in', socket.hasListeners('chat.in'))\n        if (res.result) {\n          setChatData((prevChatData) => [...prevChatData, res.packet]);\n        }\n      });\n      socket.on('user.listInRoom.refresh', (res) => {\n        if (res.result) {\n          const { userId, isOnline } = res.packet;\n          if (isOnline) {\n            setUserList((prevState) => [userId, ...prevState]);\n          } else {\n            setUserList((prevState) =>\n              prevState.filter((name) => name !== userId)\n            );\n          }\n        }\n      });\n      console.log('when registering', socket.listeners('chat.in'))\n      console.log('hasListeners', socket.hasListeners('chat.in'))\n      console.log('reg', socket.listeners('chat.in'))\n\n      getRoomInfo();\n      console.log('after gettingRoomInfo', socket.listeners('chat.in'))\n      refreshRoomInfo();\n      fetchUserList();\n    });\n\n    // socketIo.getSocket().then((socket) => {\n    //   socket.on('user.listInRoom.refresh', (res) => {\n    //     if (res.result) {\n    //       const { userId, isOnline } = res.packet;\n    //       if (isOnline) {\n    //         setUserList((prevState) => [userId, ...prevState]);\n    //       } else {\n    //         setUserList((prevState) =>\n    //           prevState.filter((name) => name !== userId)\n    //         );\n    //       }\n    //     }\n    //   });\n    // });\n  }, []);\n\n  useEffect(() => {\n    if (userUpdate) {\n      getRoomInfo();\n      setUserUpdate(false);\n    }\n  }, [userUpdate]);\n\n  if (!roomInfo) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.chattingTop}>\n        <p className={styles.roomName}>[{roomName}]</p>\n        <div className={styles.topDesc}>\n          <button onClick={handleLeave} className={styles.leaveButton}>\n            Leave Room\n          </button>\n          <button onClick={handleEditButton}>Edit Room</button>\n          <button onClick={handleFoldButton}>접기</button>\n        </div>\n      </div>\n\n      <ScrollToBottom className={styles.chattingContainer}>\n        {chatData.map((chat, i) => (\n          <Chat key={i} chat={chat} setCurrentGroup={setCurrentGroup} />\n        ))}\n      </ScrollToBottom>\n\n      <form onSubmit={handleSendChat} className={styles.inputWrapper}>\n        <select value={sendTo} onChange={setSendSelect}>\n          {chatType.map((type) => (\n            <option key={type.id} value={type.id}>\n              {type.name}\n            </option>\n          ))}\n        </select>\n        {sendTo === 'whisper' && userList.length > 1 && (\n          <select value={whisperTarget} onChange={onWhisperTargetSelect}>\n            {userList\n              .filter((user) => user !== username)\n              .map((user) => (\n                <option key={user} value={user}>\n                  {user}\n                </option>\n              ))}\n          </select>\n        )}\n\n        <input\n          type=\"text\"\n          value={chatInput}\n          onChange={handleChatInputChange}\n          placeholder={\n            sendTo === 'whisper' && userList.length <= 1\n              ? \"Can't send whisper\"\n              : ''\n          }\n          disabled={sendTo === 'whisper' && userList.length <= 1}\n        />\n        <button type=\"submit\" onClick={handleSendChat}>\n          Send\n        </button>\n      </form>\n\n      {/* Modal */}\n      <Rodal visible={showEditModal} onClose={closeEditModal}>\n        <form className={styles.editRoomModal}>\n          <div className={styles.row}>\n            <label>Name:</label>\n            <input\n              type=\"text\"\n              name=\"roomTitle\"\n              value={userEditInput.roomTitle}\n              onChange={handleEditInputChange}\n            />\n          </div>\n          <div className={styles.row}>\n            <label>Password:</label>\n            <input\n              type=\"password\"\n              name=\"roomPw\"\n              value={userEditInput.roomPw}\n              onChange={handleEditInputChange}\n            />\n          </div>\n          <div className={styles.row}>\n            <label>Capacity:</label>\n            <input\n              type=\"number\"\n              name=\"roomCapacity\"\n              value={userEditInput.roomCapacity}\n              onChange={handleEditInputChange}\n            />\n          </div>\n          <button type=\"submit\" onClick={handleEditSubmit}>\n            Edit\n          </button>\n        </form>\n      </Rodal>\n    </div>\n  );\n}\n\nexport default Chatting;\n","/Users/tachyon/Documents/develop/js/chapp-front/src/components/Container/Container.jsx",["76"],"import React, { useEffect } from 'react';\nimport HomeIcon from '../../assets/menu-icon-home.png';\nimport ChatIcon from '../../assets/menu-icon-chat.png';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nimport socketIo from '../../utils/util';\nimport axios from 'axios';\nimport styles from './container.module.scss';\nimport { useSetRecoilState } from 'recoil';\nimport { UsernameState } from '../../recoil/atoms';\n\nfunction Container({ children }) {\n  const setUsernameState = useSetRecoilState(UsernameState);\n\n  const handleSignout = () => {\n    axios\n      .get('/user/signout', { withCredentials: true })\n      .then((res) => {\n        if (res.data.result) {\n          socketIo.removeSocket();\n          setUsernameState('');\n        } else {\n          alert('Failed to signout');\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleHomeClick = () => {\n    socketIo.getSocket().then((socket) => {\n      socket.emit('user.read', (res) => {\n        if (res.packet.pos !== 0) {\n          socket.emit('room.leave', (res) => {\n            if (!res.result) {\n              alert('Failed to leave room');\n            }\n            socket.off();\n          });\n        }\n      });\n    });\n  };\n\n  return (\n    <div className={styles.container}>\n      <button className={styles.signout} onClick={handleSignout}>\n        Sign Out\n      </button>\n      <div className={styles.body}>\n        <div className={styles.iconContainer}>\n          <div className={styles.icons}>\n            <Link to=\"/main\">\n              <img src={HomeIcon} alt=\"Home\" onClick={handleHomeClick} />\n            </Link>\n            <Link to=\"/lobby\">\n              <img src={ChatIcon} alt=\"Chat\" />\n            </Link>\n          </div>\n        </div>\n        <div className={styles.children}>{children}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default withRouter(Container);\n","/Users/tachyon/Documents/develop/js/chapp-front/src/components/Chat/Chat.jsx",[],"/Users/tachyon/Documents/develop/js/chapp-front/src/components/Room/Room.jsx",[],{"ruleId":null,"fatal":true,"severity":2,"message":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":26},{"ruleId":"82","severity":1,"message":"86","line":1,"column":28,"nodeType":"84","messageId":"85","endLine":1,"endColumn":36},{"ruleId":"82","severity":1,"message":"87","line":3,"column":8,"nodeType":"84","messageId":"85","endLine":3,"endColumn":16},{"ruleId":"88","severity":1,"message":"89","line":115,"column":6,"nodeType":"90","endLine":115,"endColumn":8,"suggestions":"91"},{"ruleId":"88","severity":1,"message":"92","line":277,"column":6,"nodeType":"90","endLine":277,"endColumn":8,"suggestions":"93"},{"ruleId":"88","severity":1,"message":"94","line":284,"column":6,"nodeType":"90","endLine":284,"endColumn":18,"suggestions":"95"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":26},"Parsing error: Cannot find module './parse-with-scope'\nRequire stack:\n- /Users/tachyon/Documents/develop/js/chapp-front/node_modules/babel-eslint/lib/index.js\n- /Users/tachyon/Documents/develop/js/chapp-front/node_modules/@eslint/eslintrc/lib/config-array-factory.js\n- /Users/tachyon/Documents/develop/js/chapp-front/node_modules/@eslint/eslintrc/lib/index.js\n- /Users/tachyon/Documents/develop/js/chapp-front/node_modules/eslint/lib/cli-engine/cli-engine.js\n- /Users/tachyon/Documents/develop/js/chapp-front/node_modules/eslint/lib/cli-engine/index.js\n- /Users/tachyon/Documents/develop/js/chapp-front/node_modules/eslint/lib/api.js\n- /Users/tachyon/Documents/develop/js/chapp-front/node_modules/eslint-webpack-plugin/dist/getESLint.js\n- /Users/tachyon/Documents/develop/js/chapp-front/node_modules/eslint-webpack-plugin/dist/linter.js\n- /Users/tachyon/Documents/develop/js/chapp-front/node_modules/eslint-webpack-plugin/dist/index.js\n- /Users/tachyon/Documents/develop/js/chapp-front/node_modules/eslint-webpack-plugin/dist/cjs.js\n- /Users/tachyon/Documents/develop/js/chapp-front/node_modules/react-scripts/config/webpack.config.js\n- /Users/tachyon/Documents/develop/js/chapp-front/node_modules/react-scripts/scripts/start.js","no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'socketIo' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchGroupList', 'fetchUserList', 'refreshGroupList', 'refreshRoomList', and 'refreshUserList'. Either include them or remove the dependency array.","ArrayExpression",["98"],"React Hook useEffect has missing dependencies: 'fetchUserList', 'getRoomInfo', 'setGroupList', and 'setUserList'. Either include them or remove the dependency array. If 'setGroupList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["99"],"React Hook useEffect has a missing dependency: 'getRoomInfo'. Either include it or remove the dependency array.",["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [fetchGroupList, fetchUserList, refreshGroupList, refreshRoomList, refreshUserList]",{"range":"107","text":"108"},"Update the dependencies array to be: [fetchUserList, getRoomInfo, setGroupList, setUserList]",{"range":"109","text":"110"},"Update the dependencies array to be: [getRoomInfo, userUpdate]",{"range":"111","text":"112"},[2944,2946],"[fetchGroupList, fetchUserList, refreshGroupList, refreshRoomList, refreshUserList]",[7895,7897],"[fetchUserList, getRoomInfo, setGroupList, setUserList]",[8003,8015],"[getRoomInfo, userUpdate]"]